# vim: ft=gitconfig et st=2 sw=2 sts=2
#
# http://oli.jp/2012/git-powerup/
# http://gitimmersion.com/lab_10.html
# http://blog.blindgaenger.net/advanced_git_aliases.html
# https://github.com/skwp/dotfiles/blob/master/git/gitconfig
# http://skwp.github.com/dotfiles/

[gc]
  auto            = 1

[core]
  editor          = vim
  excludesfile    = ~/.gitignore
  attributesfile  = ~/.gitattributes
  whitespace      = fix,spushace-before-tab,tab-in-indent,trailing-space
  pager           = less -r
  # https://help.github.com/articles/dealing-with-line-endings
  autocrlf        = input # input, true, false
[advice]
  statusHints = false
[color]
  ui              = always
  interactive     = auto
[color "branch"]
  current         = yellow reverse
  local           = yellow
  remote          = green
[color "diff"]
  meta            = yellow bold
  frag            = magenta bold
  old             = red bold
  new             = green bold
[color "status"]
  added           = yellow
  changed         = green
  untracked       = cyan
[apply]
  whitespace      = fix
[format]
  pretty          = " %Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset [%an]%Creset"

[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = tracking

[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix  = true
  tool            = gvimdiff
[difftool]
  prompt          = gvimdiff
[alias]
  # Init
  this            = !git init && git add . && git commit -m \"initial commit\"                                                                      #Make this a git repo

  # Add
  a               = add                                                                                                                             # add
  chunkyadd       = add --patch                                                                                                                     # stage commits chunk by chunk

  # Branch
  b               = branch -v                                                                                                                       # branch (verbose)
  bs              = branch -a
  master          = checkout master

  # Commit
  c               = commit -m                                                                                                                       # commit with message
  ca              = commit -am                                                                                                                      # commit with all message
  ci              = commit                                                                                                                          # commit
  amend           = commit --amend                                                                                                                  # ammend your last commit
  contains        = !sh -c 'git branch -a --contains $1' -

  # Checkout
  co              = checkout
  nb              = checkout -b                                                                                                                     # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # Clone
  cl              = clone
  cr              = clone -recursive                                                                                                                # clone a repository including all submodules

  # Cherry-pick
  cp              = cherry-pick -x                                                                                                                  # grab a change from a branch

  alias           = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort                              #Show all defined aliases

  # Diff
  d               = diff --color-words --patch-with-stat                                                                                            # diff unstaged changes
  dc              = diff --cached                                                                                                                   # diff staged changes
  df              = difftool
  dlast           = diff HEAD^                                                                                                                      # diff last committed change

  # Log
  l               = log --pretty=oneline -n 20 --graph --date=short
  lg              = log --graph --pretty=format:'%an: %Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  ll              = log --stat --abbrev-commit
  last            = log -1 HEAD
  tc              = !git log -a --pretty=oneline | wc -l

  changes         = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short           = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  changelog       = log --pretty=format:\" * %s\"
  shortnocolor    = log --pretty=format:\"%h %cr %cn %s\"

  # Pull
  pl              = pull
  pls             = !"git pull; git submodule foreach git pull origin master"                                                                     # pull in remote changes for the current repository and all its submodules
  pl-release      = pull origin release
  pl-master       = pull origin master

  # Push
  ps              = push
  undopush        = push -f origin HEAD^:master                                                                                                   # undo a `git push`
  ps-release      = push origin release
  ps-master       = push origin master

  # Rebase
  rc              = rebase --continue                                                                                                             # continue rebase
  rs              = rebase --skip                                                                                                                 # skip rebase

  # Remote
  r               = remote -v                                                                                                                     # show remotes (verbose)
  url             = config --get remote.origin.url

  # Fetch
  fa              = fetch --all

  # Reset
  unstage         = reset HEAD                                                                                                                    # remove files from index (tracking)
  uncommit        = reset --soft HEAD^                                                                                                            # go back before last commit, with files in uncommitted state
  filelog         = log -u                                                                                                                        # show changes to a file
  mt              = mergetool                                                                                                                     # fire up the merge tool
  rollback        = reset --hard HEAD@{1}

  # Status
  st              = status

  # Stash
  ss              = stash                                                                                                                         # stash changes
  sl              = stash list                                                                                                                    # list stashes
  sa              = stash apply                                                                                                                   # apply stash (restore changes)
  sp              = stash pop                                                                                                                     # apply stash & remove stash
  sd              = stash drop                                                                                                                    # drop stashes (destory changes)

  # Credit an author on the latest commit
  credit = "!f() { goit commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  ignore          = !([ ! -e .gitignore ] && touch .gitignore) | echo $1 â†’.gitignore                                                                #Ignore a file

  r               = !git ls-files -z --deleted | xargs -0 git rm                                                                                    #Remove files which have been deleted

  targz           = !git archive master | gzip > source-tree.tar.gz

  # top commit
  top             = shortlog -sn

  # Tag
  t               = tag -n
  tags            = tag -l                                                                                                                                         # Show verbose output about tags

  # Repo Root Path
  tp              = rev-parse --show-toplevel

[merge]
  log             = true
  summary         = true
  verbosity       = 1
[rerere]
  enabled         = true
[user]
  name            = cfddream
  email           = cfddream@gmail.com

# Use `origin` as the default remote on the `master` branch in all cases
[branch]
  autosetupmerge = true
[branch "master"]
 remote = origin
 merge = refs/heads/master

[url "git@github.com:"]
  insteadOf       = "gh:"
  pushInsteadOf   = "github:"
  pushInsteadOf   = "git://github.com/"
[url "git://github.com/"]
  insteadOf       = "github:"
[url "git@gist.github.com:"]
  insteadOf       = "gst:"
  pushInsteadOf   = "gist:"
  pushInsteadOf   = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf       = "gist:"
