# vim: ft=gitconfig:

[alias]
  aa = add --all
  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD
  ap = add --patch

  # Display all aliases
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort

  # Clone a repository including all submodules
  c = clone --recursive
  # Commit all changes
  ca = !git add -A && git commit -av
  ci = commit -v
  co = checkout
  create-branch = !sh -c 'git push origin HEAD:refs/heads/$1 && git fetch origin && git branch --track $1 origin/$1 && cd . && git checkout $1' -
  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  delete-branch = !sh -c 'git push origin :refs/heads/$1 && git branch -D $1' -
  # Remove branches that have already been merged with master
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"
  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"
  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  merge-branch = !git checkout master && git merge @{-1}

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"
  pr = !hub pull-request

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"
  # View the current working tree status using the short format
  s = status -s
  st = status
  up = !git fetch origin && git rebase origin/master

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  ll = log --stat --abbrev-commit
  lasttag = describe --tags --abbrev=0
  ls = ls-files

[core]
  pager = cat
  editor = vim
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes
  autocrlf = input
  # Treat spaces before tabs and all kinds of trailing whitespace as an error.
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of
  # a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space
  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false
  # show chinese in `git status`
  quotepath = false
  safecrlf = false

[include]
  path = .gitconfig.local
[commit]
  template = ~/.gitmessage

[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1
[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix
[hub]
  protocol = https
[merge]
  ff = only
  log = true
[diff]
  # Detect copies as well as renames
  renames = copies

[advice]
  statusHints = false
  pushNonFastForward = false
  implicitIdentity = false
  detachedHead = false

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"
[url "git@github.com:fundon/"]
  insteadOf = "git://github.com/fundon/"

[user]
  name = fundon
  email = cfddream@gmail.com

[push]
	default = simple
