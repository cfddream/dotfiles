# vim: ft=gitconfig et st=2 sw=2 sts=2
#
# http://oli.jp/2012/git-powerup/
# http://gitimmersion.com/lab_10.html
# http://blog.blindgaenger.net/advanced_git_aliases.html
# https://github.com/skwp/dotfiles/blob/master/git/gitconfig
# http://skwp.github.com/dotfiles/

[gc]
  auto            = 1

[core]
  editor          = vim
  excludesfile    = ~/.gitignore
  attributesfile  = ~/.gitattributes
  whitespace      = fix,spushace-before-tab,tab-in-indent,trailing-space
  pager           = less -r
  # https://help.github.com/articles/dealing-with-line-endings
  autocrlf        = input # input, true, false
[color]
  ui              = always
  interactive     = auto
[color "branch"]
  current         = yellow reverse
  local           = yellow
  remote          = green
[color "diff"]
  meta            = yellow bold
  frag            = magenta bold
  old             = red bold
  new             = green bold
[color "status"]
  added           = yellow
  changed         = green
  untracked       = cyan
[apply]
  whitespace      = fix
[format]
  pretty          = " %Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %an"
[diff]
  mnemonicprefix  = true
  tool            = gvimdiff
[difftool]
  prompt          = gvimdiff
[alias]
  alias           = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort                              #Show all defined aliases
  a               = !git add . && git status
  ac              = !git add -A && git commit -m
  au              = !git add -u && git status
  aa              = !git add . && git add -u && git status
  amend           = !git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend                                                               #Amend with the same message

  b               = branch -v
  branches        = branch -a

  c               = clone
  # Commit all changes
  ca = !git add -A && git commit -av
  # Clone a repository including all submodules
  cr              = clone -recursive
  # Switch to a branch, creating it if necessary
  go              = checkout -B
  cm              = commit -m
  cp              = cherry-pick -x

  # Credit an author on the latest commit
 credit = "!f() { goit commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Diff
  d               = diff --color-words --patch-with-stat
  df              = difftool

  ignore          = !([ ! -e .gitignore ] && touch .gitignore) | echo $1 â†’.gitignore                                                                #Ignore a file
  r               = !git ls-files -z --deleted | xargs -0 git rm                                                                                    #Remove files which have been deleted
  this            = !git init && git add . && git commit -m \"initial commit\"                                                                      #Make this a git repo
  spull           = svn rebase
  spush           = svn dcommit
  tc              = !git log -a --pretty=oneline | wc -l

  l               = log --pretty=oneline -n 20 --graph
  last            = log -1 HEAD
  lg              = log --graph --pretty=format:'%an: %Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  ll              = log --stat --abbrev-commit

  targz           = !git archive master | gzip > source-tree.tar.gz

  # pull
  pl              = pull
  # Pull in remote changes for the current repository and all its submodules
  pls             = !"git pull; git submodule foreach git pull origin master"

  # push
  ps              = push
  # Undo a `git push`
  undopush = push -f origin HEAD^:master

  # rebase
  rc              = rebase --continue
  rs              = rebase --skip

  # remote
  r               = remote -v

  # top commit
  top             = shortlog -sn

  # reset
  unstage         = reset HEAD
  uncommit        = reset --soft HEAD^
  filelog         = log -u
  mt              = mergetool

  # stash
  ss              = stash
  sl              = stash list
  sa              = stash apply
  sd              = stash drop

  # status
  # View the current working tree status using the short forma
  s               = status -s

  # tag
  t               = tag -n
  # Show verbose output about tags
  tags            = tag -l

  remotes         = remote -v
[merge]
  log             = true
  summary         = true
  verbosity       = 1
[rerere]
  enabled         = true
[user]
  name            = cfddream
  email           = cfddream@gmail.com

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
 remote = origin
 merge = refs/heads/master

[url "git@github.com:"]
  insteadOf       = "gh:"
  pushInsteadOf   = "github:"
  pushInsteadOf   = "git://github.com/"
[url "git://github.com/"]
  insteadOf       = "github:"
[url "git@gist.github.com:"]
  insteadOf       = "gst:"
  pushInsteadOf   = "gist:"
  pushInsteadOf   = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf       = "gist:"
