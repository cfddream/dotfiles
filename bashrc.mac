#!/bin/bash
# vim: ft=sh
# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# Append to the Bash history file, rather than overwriting it
shopt -s histappend

# Autocorrect typos in path names when using `cd`
shopt -s cdspell

# Time Zone
# export TZ="/usr/share/zoneinfo/{TIMEZONE_DIRECTORY}/{TIMEZONE_FILE}>"
# export TZ="TIMEZONE_DIRECTORY/TIMEZONE_FILE"
export TZ="Asia/Shanghai"

# Larger bash history (allow 32³ entries; default is 500)
export HISTSIZE=32768
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL=ignoredups
# Make some commands not show up in history
export HISTIGNORE="ls:ls *:cd:cd -:pwd;exit:date:* --help"

MACOSX_DEPLOYMENT_TARGET=10.7
ARCHFLAGS="-arch x86_64"
CFLAGS="-arch x86_64 -g -Os -pipe -no-cpp-precomp"
CCFLAGS="-arch x86_64 -g -Os -pipe"
CXXFLAGS="-arch x86_64 -g -Os -pipe"
LDFLAGS="-arch x86_64 -bind_at_load"
EXTRACTFLAGS="-arch X86_64 -g -Os -pipe -no-cpp-precomp"
export ARCHFLAGS CFLAGS CXXFLAGS LDFLAGS CCFLAGS MACOSX_DEPLOYMENT_TARGET

export TERM="xterm-256color"
export LC_ALL="zh_CN.UTF-8"
export LANG="zh_CN"

DEVELOP_VD="$HOME/Develop/VD"

export PATH="$DEVELOP_VD/bin:$PATH"

# LD_LIBRARY_PATH
export LD_LIBRARY_PATH="$DEVELOP_VD/python2/lib:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="$DEVELOP_VD/percona/lib:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="$DEVELOP_VD/lua/lib:$LD_LIBRARY_PATH"
export DYLD_LIBRARY_PATH="$DEVELOP_VD/icu/lib:$DYLD_LIBRARY_PATH"
export DYLD_LIBRARY_PATH="$DEVELOP_VD/imagemagick/lib:$DYLD_LIBRARY_PATH"

export MANPATH=$DEVELOP_VD/share/man:$MANPATH

export NU_DIR=$DEVELOP_VD/nu
source $HOME/Develop/myprojects/nu/nu
export NODE_PATH=$NODE_PATH:$NODE_PATH/node_modules

export GOROOT=$DEVELOP_VD/go
export GOARCH=amd64
export GOOS=darwin

if [ -f $DEVELOP_VD/etc/bash_completion ]; then
    BASH_COMPLETION=$DEVELOP_VD/etc/bash_completion
    BASH_COMPLETION_DIR=$DEVELOP_VD/etc/bash_completion.d
    BASH_COMPLETION_COMPAT_DIR=$DEVELOP_VD/etc/bash_completion.d
    source $DEVELOP_VD/etc/bash_completion
fi
if [ "$TERM" = "xterm-256color" ]; then
    export LS_OPTIONS='--color=auto'
    eval `dircolors $DEVELOP_VD/etc/dircolors.256dark`
fi

if [ -d $DEVELOP_VD/python2/lib/python2.7/site-packages ]; then
    export PYTHONPATH="$DEVELOP_VD/python2/lib/python2.7/site-packages"
fi

RESET="\[\033[0m\]"
GRAY="\[\033[38;0;15m\]"
BLACK="\[\033[38;0;30m\]"
RED="\[\033[38;0;31m\]"
GREEN="\[\033[38;0;32m\]"
YELLOW="\[\033[38;0;33m\]"
BLUE="\[\033[38;0;34m\]"
MAGENTA="\[\033[38;0;35m\]"
CYAN="\[\033[38;0;36m\]"
WHITE="\[\033[38;0;37m\]"

BBLACK="\[\033[48;1;30m\]"
BRED="\[\033[48;1;31m\]"
BGREEN="\[\033[48;1;32m\]"
BYELLOW="\[\033[48;1;33m\]"
BBLUE="\[\033[48;1;34m\]"
BMAGENTA="\[\033[48;1;35m\]"
BCYAN="\[\033[48;1;36m\]"
BWHITE="\[\033[48;1;37m\]"

Time24h="\t"
Time12h="\T"
Time12a="\@"
UserName="\u"
HostName="\h"
PathShort="\w"
PathFull="\W"
NewLine="\n"
Jobs="\j"

function parse_git_dirty() {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}

function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/ [\1$(parse_git_dirty)]/"
}

oldPS1=$PS1
oldPS2=$PS2
export PS1="${GRAY}${Time24h} ${GREEN}${UserName}${YELLOW}@${BLUE}${HostName}:${CYAN}${PathShort}${RED}\$(parse_git_branch) ${RED}Δ ${RESET}"
export PS2="${RED}Δ ↔ ${RESET}"

# editor/pager
#export EDITOR="vim"
export PAGER="`which less` -X"
export BROWSER="$PAGER"
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# ls
alias ls="ls $LS_OPTIONS -hF"
alias ll="ls $LS_OPTIONS -lahGFh"
alias la="ls $LS_OPTIONS -A"
alias lc="ls $LS_OPTIONS -lCaG"
alias l="ls $LS_OPTIONS -lAhF"
alias lsd="ls -l | grep '^d'"

# stat
alias stat_chmod="stat -c '%A %a %n' *"

alias c="clear"
alias h="history"
alias ..="cd .."
alias ...="cd ../.."
alias ~="cd ~"
alias b="cd -"
alias i="whoami"
alias untgz="tar -zxvf"
alias untbz2="tar -jxvf"
alias maketargz="tar czf"

# prev command
alias prevC="!!"
# prev command result
alias prevR="!$"

# use JSON.stringify to pretty-print JSON.
# formatjson '{ foo: "lorem", bar: "ipsum" }'
function formatjson() {
  local json=${1-''}
  node -e "console.log(JSON.stringify(eval($json), null, 2));"
}

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
alias localip="ipconfig getifaddr en0"

# Finding port for all running services on Mac
alias listen="lsof -i -s TCP:listen"

# Enhanced WHOIS lookups
alias whois="whois -h whois-servers.net"

# grep
alias ack="ack -i -u"
alias grep='grep $LS_OPTIONS'
alias fgrep='fgrep $LS_OPTIONS'
alias egrep='egrep $LS_OPTIONS'

# images must install imagemagick
alias imginfo="identify -format '-- %f -- \nType: %m\nSize: %b bytes\nResolution: %wpx x %hpx\nColors: %k'"
alias imgres="identify -format '%f: %wpx x %hpx'"

# mysql
alias mysql-login="mysql -u`i`"
alias mysql-up="mysql.server start"
alias mysql-down="mysql.server stop"

# pgsql
alias pgsql-login="psql -d postgres"
alias pgsql-up="pg_ctl -D $HOMEBREW/var/postgres -l $HOMEBREW/var/postgres/server.log start"
alias pgsql-down="pg_ctl -D $HOMEBREW/var/postgres stop -s -m fast"

# nginx
alias nginx-up="sudo nginx -c $DEVELOP_VD/nginx/etc/nginx.conf"
alias nginx-down="sudo nginx -s stop"

# redis
alias redis-up="redis-server $DEVELOP_VD/redis/redis.conf > /dev/null &"
alias redis-down="killall redis-server"

# lighttpd
alias lighttpd-up="sudo lighttpd -f $DEVELOP_VD/lighttpd/config/lighttpd.conf.back"
alias lighttpd-down="killall lighttpd"

# php-fpm
alias phpfpm-up="php-fpm 2> /dev/null"
alias phpfpm-down="killall php-fpm"

# mongodb
alias mongodb-up="mongod -f $DEVELOP_VD/mongodb/mongodb.conf > /dev/null &"
alias mongodb-down="killall mongod"

# website speed test
function speedtest() {
  curl -o /dev/null -s -w "connect: %{time_connect}s\nresponse: %{time_starttransfer}s\ntotal: %{time_total}s\ncode: %{http_code}\n" $1
}

# generate a random password
function randompassword() {
  local LEN=${1-6}
  head /dev/urandom | uuencode -m - | sed -n 2p | cut -c1-${1:-$LEN};
}

# volume
#http://xkcd.com/530/
alias stfu="osascript -e 'set volume output muted true'"
alias pumpitup="osascript -e 'set volume 10'"

# PlistBuddy alias, because sometimes `defaults` just doesn’t cut it
alias plistbuddy="/usr/libexec/PlistBuddy"

# Flush Directory Service cache
alias flush="dscacheutil -flushcache"

# Disable Spotlight
alias spotoff="sudo mdutil -a -i off"
# Enable Spotlight
alias spoton="sudo mdutil -a -i on"

# URL-encode strings
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# download website
alias wgetwebsite="wget -m -k -K -E "

# Canonical hex dump; some systems have this symlinked
type -t hd > /dev/null || alias hd="hexdump -C"

# OS X has no `md5sum`, so use `md5` as a fallback
type -t md5sum > /dev/null || alias md5sum="md5"

# Trim new lines and copy to clipboard
alias c="tr -d '\n' | pbcopy"

# Recursively delete `.DS_Store` files
alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"

# File size
alias fs="stat -f \"%z bytes\""

# ROT13-encode text. Works for decoding, too! ;)
alias rot13='tr a-zA-Z n-za-mN-ZA-M'

# Empty the Trash on all mounted volumes and the main HDD
# Also, clear Apple’s System Logs to improve shell startup speed
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"

# Show/hide hidden files in Finder
alias show="defaults write com.apple.Finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.Finder AppleShowAllFiles -bool false && killall Finder"

# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# curl download
alias curldown="curl -O "

# One of @janmoesen’s ProTip™s
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
  alias "$method"="lwp-request -m '$method'"
done

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring
# wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2)" scp sftp ssh

# Add tab completion for `defaults read|write NSGlobalDomain`
# You could just use `-g` instead, but I like being explicit
complete -W "NSGlobalDomain" defaults

# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@"
  }
fi

# Create a data URL from an image (works for other file types too, if you tweak the Content-Type afterwards)
function dataurl() {
  echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
  encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Gzip-enabled `curl`
function gurl() {
  curl -sH "Accept-Encoding: gzip" "$@" | gunzip
}

# Syntax-highlight JSON strings or files
function json() {
  if [ -p /dev/stdin ]; then
    # piping, e.g. `echo '{"foo":42}' | json`
    python -mjson.tool | pygmentize -l javascript
  else
    # e.g. `json '{"foo":42}'`
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  fi
}

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
  echo # newline
}
